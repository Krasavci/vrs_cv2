
vrs_cv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000514  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000650  08000658  00010658  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000650  08000650  00010650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000654  08000654  00010654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010658  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  20000000  08000658  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  2000001c  08000658  0002001c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00010658  2**0
                  CONTENTS, READONLY
  9 .debug_info   00001a82  00000000  00000000  00010681  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000690  00000000  00000000  00012103  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000002b8  00000000  00000000  00012798  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000260  00000000  00000000  00012a50  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00000ed7  00000000  00000000  00012cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000c13  00000000  00000000  00013b87  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  0001479a  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000a48  00000000  00000000  00014818  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00015260  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000000 	.word	0x20000000
 8000158:	00000000 	.word	0x00000000
 800015c:	08000638 	.word	0x08000638

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000004 	.word	0x20000004
 8000178:	08000638 	.word	0x08000638

0800017c <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800017c:	b480      	push	{r7}
 800017e:	b085      	sub	sp, #20
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
 8000184:	460b      	mov	r3, r1
 8000186:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000188:	2300      	movs	r3, #0
 800018a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	8a1b      	ldrh	r3, [r3, #16]
 8000190:	b29a      	uxth	r2, r3
 8000192:	887b      	ldrh	r3, [r7, #2]
 8000194:	4013      	ands	r3, r2
 8000196:	b29b      	uxth	r3, r3
 8000198:	2b00      	cmp	r3, #0
 800019a:	d002      	beq.n	80001a2 <GPIO_ReadInputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
 800019c:	2301      	movs	r3, #1
 800019e:	73fb      	strb	r3, [r7, #15]
 80001a0:	e001      	b.n	80001a6 <GPIO_ReadInputDataBit+0x2a>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80001a2:	2300      	movs	r3, #0
 80001a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80001a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80001a8:	4618      	mov	r0, r3
 80001aa:	3714      	adds	r7, #20
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bc80      	pop	{r7}
 80001b0:	4770      	bx	lr
 80001b2:	bf00      	nop

080001b4 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 80001b4:	b480      	push	{r7}
 80001b6:	b083      	sub	sp, #12
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
 80001bc:	460b      	mov	r3, r1
 80001be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80001c0:	78fb      	ldrb	r3, [r7, #3]
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d006      	beq.n	80001d4 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 80001c6:	4909      	ldr	r1, [pc, #36]	; (80001ec <RCC_AHBPeriphClockCmd+0x38>)
 80001c8:	4b08      	ldr	r3, [pc, #32]	; (80001ec <RCC_AHBPeriphClockCmd+0x38>)
 80001ca:	69da      	ldr	r2, [r3, #28]
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	4313      	orrs	r3, r2
 80001d0:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 80001d2:	e006      	b.n	80001e2 <RCC_AHBPeriphClockCmd+0x2e>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 80001d4:	4905      	ldr	r1, [pc, #20]	; (80001ec <RCC_AHBPeriphClockCmd+0x38>)
 80001d6:	4b05      	ldr	r3, [pc, #20]	; (80001ec <RCC_AHBPeriphClockCmd+0x38>)
 80001d8:	69da      	ldr	r2, [r3, #28]
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	43db      	mvns	r3, r3
 80001de:	4013      	ands	r3, r2
 80001e0:	61cb      	str	r3, [r1, #28]
  }
}
 80001e2:	bf00      	nop
 80001e4:	370c      	adds	r7, #12
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bc80      	pop	{r7}
 80001ea:	4770      	bx	lr
 80001ec:	40023800 	.word	0x40023800

080001f0 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b086      	sub	sp, #24
 80001f4:	af00      	add	r7, sp, #0
  int i = 0;
 80001f6:	2300      	movs	r3, #0
 80001f8:	617b      	str	r3, [r7, #20]
  int j = 0;
 80001fa:	2300      	movs	r3, #0
 80001fc:	613b      	str	r3, [r7, #16]
  int BUTTON = 0;
 80001fe:	2300      	movs	r3, #0
 8000200:	607b      	str	r3, [r7, #4]
  int BUTTON_OLD = 0;
 8000202:	2300      	movs	r3, #0
 8000204:	60fb      	str	r3, [r7, #12]
  int Change_Mod = 0;
 8000206:	2300      	movs	r3, #0
 8000208:	60bb      	str	r3, [r7, #8]
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 800020a:	2101      	movs	r1, #1
 800020c:	2001      	movs	r0, #1
 800020e:	f7ff ffd1 	bl	80001b4 <RCC_AHBPeriphClockCmd>
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 8000212:	2101      	movs	r1, #1
 8000214:	2004      	movs	r0, #4
 8000216:	f7ff ffcd 	bl	80001b4 <RCC_AHBPeriphClockCmd>

  /* TODO - Add your application code here */

  //uloha 1

  GPIOA->MODER |= (uint32_t) 0b01<<10;
 800021a:	4a63      	ldr	r2, [pc, #396]	; (80003a8 <main+0x1b8>)
 800021c:	4b62      	ldr	r3, [pc, #392]	; (80003a8 <main+0x1b8>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000224:	6013      	str	r3, [r2, #0]
  GPIOA->OTYPER &= ~(uint32_t) 0b1<<5;
 8000226:	4a60      	ldr	r2, [pc, #384]	; (80003a8 <main+0x1b8>)
 8000228:	4b5f      	ldr	r3, [pc, #380]	; (80003a8 <main+0x1b8>)
 800022a:	889b      	ldrh	r3, [r3, #4]
 800022c:	b29b      	uxth	r3, r3
 800022e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000232:	b29b      	uxth	r3, r3
 8000234:	8093      	strh	r3, [r2, #4]
  GPIOA->PUPDR |= (uint32_t) 0b01<<10;
 8000236:	4a5c      	ldr	r2, [pc, #368]	; (80003a8 <main+0x1b8>)
 8000238:	4b5b      	ldr	r3, [pc, #364]	; (80003a8 <main+0x1b8>)
 800023a:	68db      	ldr	r3, [r3, #12]
 800023c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000240:	60d3      	str	r3, [r2, #12]
  GPIOA->OSPEEDR |= (uint32_t) 0b11<<10;
 8000242:	4a59      	ldr	r2, [pc, #356]	; (80003a8 <main+0x1b8>)
 8000244:	4b58      	ldr	r3, [pc, #352]	; (80003a8 <main+0x1b8>)
 8000246:	689b      	ldr	r3, [r3, #8]
 8000248:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 800024c:	6093      	str	r3, [r2, #8]

  GPIOA->ODR |= (uint32_t) 0b1<<5;
 800024e:	4a56      	ldr	r2, [pc, #344]	; (80003a8 <main+0x1b8>)
 8000250:	4b55      	ldr	r3, [pc, #340]	; (80003a8 <main+0x1b8>)
 8000252:	8a9b      	ldrh	r3, [r3, #20]
 8000254:	b29b      	uxth	r3, r3
 8000256:	f043 0320 	orr.w	r3, r3, #32
 800025a:	b29b      	uxth	r3, r3
 800025c:	8293      	strh	r3, [r2, #20]
  GPIOA->ODR &= ~(uint32_t) 0b1<<5;
 800025e:	4a52      	ldr	r2, [pc, #328]	; (80003a8 <main+0x1b8>)
 8000260:	4b51      	ldr	r3, [pc, #324]	; (80003a8 <main+0x1b8>)
 8000262:	8a9b      	ldrh	r3, [r3, #20]
 8000264:	b29b      	uxth	r3, r3
 8000266:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800026a:	b29b      	uxth	r3, r3
 800026c:	8293      	strh	r3, [r2, #20]

  GPIOA->BSRRL |= (uint32_t) 0b1<<5;
 800026e:	4a4e      	ldr	r2, [pc, #312]	; (80003a8 <main+0x1b8>)
 8000270:	4b4d      	ldr	r3, [pc, #308]	; (80003a8 <main+0x1b8>)
 8000272:	8b1b      	ldrh	r3, [r3, #24]
 8000274:	b29b      	uxth	r3, r3
 8000276:	f043 0320 	orr.w	r3, r3, #32
 800027a:	b29b      	uxth	r3, r3
 800027c:	8313      	strh	r3, [r2, #24]
  GPIOA->BSRRH |= (uint32_t) 0b1<<5;
 800027e:	4a4a      	ldr	r2, [pc, #296]	; (80003a8 <main+0x1b8>)
 8000280:	4b49      	ldr	r3, [pc, #292]	; (80003a8 <main+0x1b8>)
 8000282:	8b5b      	ldrh	r3, [r3, #26]
 8000284:	b29b      	uxth	r3, r3
 8000286:	f043 0320 	orr.w	r3, r3, #32
 800028a:	b29b      	uxth	r3, r3
 800028c:	8353      	strh	r3, [r2, #26]


  //uloha 2
  GPIOC->MODER &= ~(uint32_t) 0b11<<26;
 800028e:	4a47      	ldr	r2, [pc, #284]	; (80003ac <main+0x1bc>)
 8000290:	4b46      	ldr	r3, [pc, #280]	; (80003ac <main+0x1bc>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8000298:	6013      	str	r3, [r2, #0]
  GPIOC->OTYPER &= ~(uint32_t) 0b1<<13;
 800029a:	4a44      	ldr	r2, [pc, #272]	; (80003ac <main+0x1bc>)
 800029c:	4b43      	ldr	r3, [pc, #268]	; (80003ac <main+0x1bc>)
 800029e:	889b      	ldrh	r3, [r3, #4]
 80002a0:	b29b      	uxth	r3, r3
 80002a2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80002a6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80002aa:	b29b      	uxth	r3, r3
 80002ac:	8093      	strh	r3, [r2, #4]
  GPIOC->PUPDR &= ~(uint32_t) 0b11<<26;
 80002ae:	4a3f      	ldr	r2, [pc, #252]	; (80003ac <main+0x1bc>)
 80002b0:	4b3e      	ldr	r3, [pc, #248]	; (80003ac <main+0x1bc>)
 80002b2:	68db      	ldr	r3, [r3, #12]
 80002b4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80002b8:	60d3      	str	r3, [r2, #12]


  /* Infinite loop */
  while (1)
  {
	i++;
 80002ba:	697b      	ldr	r3, [r7, #20]
 80002bc:	3301      	adds	r3, #1
 80002be:	617b      	str	r3, [r7, #20]
	BUTTON = ((GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_13))+1)%2;
 80002c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002c4:	4839      	ldr	r0, [pc, #228]	; (80003ac <main+0x1bc>)
 80002c6:	f7ff ff59 	bl	800017c <GPIO_ReadInputDataBit>
 80002ca:	4603      	mov	r3, r0
 80002cc:	1c5a      	adds	r2, r3, #1
 80002ce:	4b38      	ldr	r3, [pc, #224]	; (80003b0 <main+0x1c0>)
 80002d0:	4013      	ands	r3, r2
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	da03      	bge.n	80002de <main+0xee>
 80002d6:	3b01      	subs	r3, #1
 80002d8:	f063 0301 	orn	r3, r3, #1
 80002dc:	3301      	adds	r3, #1
 80002de:	607b      	str	r3, [r7, #4]
	j=0;
 80002e0:	2300      	movs	r3, #0
 80002e2:	613b      	str	r3, [r7, #16]
//uloha3(1)
	while (j<2000){
 80002e4:	e00a      	b.n	80002fc <main+0x10c>
		GPIOA->ODR |= (uint32_t) 0b01<<5;
 80002e6:	4a30      	ldr	r2, [pc, #192]	; (80003a8 <main+0x1b8>)
 80002e8:	4b2f      	ldr	r3, [pc, #188]	; (80003a8 <main+0x1b8>)
 80002ea:	8a9b      	ldrh	r3, [r3, #20]
 80002ec:	b29b      	uxth	r3, r3
 80002ee:	f043 0320 	orr.w	r3, r3, #32
 80002f2:	b29b      	uxth	r3, r3
 80002f4:	8293      	strh	r3, [r2, #20]
		j++;
 80002f6:	693b      	ldr	r3, [r7, #16]
 80002f8:	3301      	adds	r3, #1
 80002fa:	613b      	str	r3, [r7, #16]
  {
	i++;
	BUTTON = ((GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_13))+1)%2;
	j=0;
//uloha3(1)
	while (j<2000){
 80002fc:	693b      	ldr	r3, [r7, #16]
 80002fe:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000302:	dbf0      	blt.n	80002e6 <main+0xf6>
		GPIOA->ODR |= (uint32_t) 0b01<<5;
		j++;
	}
	while (j>0){
 8000304:	e00a      	b.n	800031c <main+0x12c>
			GPIOA->ODR &= ~(uint32_t) 0b01<<5;
 8000306:	4a28      	ldr	r2, [pc, #160]	; (80003a8 <main+0x1b8>)
 8000308:	4b27      	ldr	r3, [pc, #156]	; (80003a8 <main+0x1b8>)
 800030a:	8a9b      	ldrh	r3, [r3, #20]
 800030c:	b29b      	uxth	r3, r3
 800030e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000312:	b29b      	uxth	r3, r3
 8000314:	8293      	strh	r3, [r2, #20]
			j--;
 8000316:	693b      	ldr	r3, [r7, #16]
 8000318:	3b01      	subs	r3, #1
 800031a:	613b      	str	r3, [r7, #16]
//uloha3(1)
	while (j<2000){
		GPIOA->ODR |= (uint32_t) 0b01<<5;
		j++;
	}
	while (j>0){
 800031c:	693b      	ldr	r3, [r7, #16]
 800031e:	2b00      	cmp	r3, #0
 8000320:	dcf1      	bgt.n	8000306 <main+0x116>
			GPIOA->ODR &= ~(uint32_t) 0b01<<5;
			j--;
	}
//uloha3(2)
	if (BUTTON == 1){
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	2b01      	cmp	r3, #1
 8000326:	d108      	bne.n	800033a <main+0x14a>
		GPIOA->ODR |= (uint32_t) 0b01<<5;
 8000328:	4a1f      	ldr	r2, [pc, #124]	; (80003a8 <main+0x1b8>)
 800032a:	4b1f      	ldr	r3, [pc, #124]	; (80003a8 <main+0x1b8>)
 800032c:	8a9b      	ldrh	r3, [r3, #20]
 800032e:	b29b      	uxth	r3, r3
 8000330:	f043 0320 	orr.w	r3, r3, #32
 8000334:	b29b      	uxth	r3, r3
 8000336:	8293      	strh	r3, [r2, #20]
 8000338:	e00a      	b.n	8000350 <main+0x160>
	}
	else if (BUTTON == 0){
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	2b00      	cmp	r3, #0
 800033e:	d107      	bne.n	8000350 <main+0x160>
		GPIOA->ODR &= ~(uint32_t) 0b01<<5;
 8000340:	4a19      	ldr	r2, [pc, #100]	; (80003a8 <main+0x1b8>)
 8000342:	4b19      	ldr	r3, [pc, #100]	; (80003a8 <main+0x1b8>)
 8000344:	8a9b      	ldrh	r3, [r3, #20]
 8000346:	b29b      	uxth	r3, r3
 8000348:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800034c:	b29b      	uxth	r3, r3
 800034e:	8293      	strh	r3, [r2, #20]
	}
//uloha3(3)
	if ((BUTTON_OLD == 0) && (BUTTON == 1)){
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	2b00      	cmp	r3, #0
 8000354:	d10d      	bne.n	8000372 <main+0x182>
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	2b01      	cmp	r3, #1
 800035a:	d10a      	bne.n	8000372 <main+0x182>
		Change_Mod = (Change_Mod + 1) % 2;
 800035c:	68bb      	ldr	r3, [r7, #8]
 800035e:	1c5a      	adds	r2, r3, #1
 8000360:	4b13      	ldr	r3, [pc, #76]	; (80003b0 <main+0x1c0>)
 8000362:	4013      	ands	r3, r2
 8000364:	2b00      	cmp	r3, #0
 8000366:	da03      	bge.n	8000370 <main+0x180>
 8000368:	3b01      	subs	r3, #1
 800036a:	f063 0301 	orn	r3, r3, #1
 800036e:	3301      	adds	r3, #1
 8000370:	60bb      	str	r3, [r7, #8]
	}
	if (Change_Mod == 1){
 8000372:	68bb      	ldr	r3, [r7, #8]
 8000374:	2b01      	cmp	r3, #1
 8000376:	d108      	bne.n	800038a <main+0x19a>
		GPIOA->ODR |= (uint32_t) 0b01<<5;
 8000378:	4a0b      	ldr	r2, [pc, #44]	; (80003a8 <main+0x1b8>)
 800037a:	4b0b      	ldr	r3, [pc, #44]	; (80003a8 <main+0x1b8>)
 800037c:	8a9b      	ldrh	r3, [r3, #20]
 800037e:	b29b      	uxth	r3, r3
 8000380:	f043 0320 	orr.w	r3, r3, #32
 8000384:	b29b      	uxth	r3, r3
 8000386:	8293      	strh	r3, [r2, #20]
 8000388:	e00a      	b.n	80003a0 <main+0x1b0>
	}
	else if (Change_Mod == 0){
 800038a:	68bb      	ldr	r3, [r7, #8]
 800038c:	2b00      	cmp	r3, #0
 800038e:	d107      	bne.n	80003a0 <main+0x1b0>
		GPIOA->ODR &= ~(uint32_t) 0b01<<5;
 8000390:	4a05      	ldr	r2, [pc, #20]	; (80003a8 <main+0x1b8>)
 8000392:	4b05      	ldr	r3, [pc, #20]	; (80003a8 <main+0x1b8>)
 8000394:	8a9b      	ldrh	r3, [r3, #20]
 8000396:	b29b      	uxth	r3, r3
 8000398:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800039c:	b29b      	uxth	r3, r3
 800039e:	8293      	strh	r3, [r2, #20]
	}
	BUTTON_OLD = BUTTON;
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	60fb      	str	r3, [r7, #12]

  }
 80003a4:	e789      	b.n	80002ba <main+0xca>
 80003a6:	bf00      	nop
 80003a8:	40020000 	.word	0x40020000
 80003ac:	40020800 	.word	0x40020800
 80003b0:	80000001 	.word	0x80000001

080003b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80003b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003ec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80003b8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80003ba:	e003      	b.n	80003c4 <LoopCopyDataInit>

080003bc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80003bc:	4b0c      	ldr	r3, [pc, #48]	; (80003f0 <LoopFillZerobss+0x18>)
  ldr r3, [r3, r1]
 80003be:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80003c0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80003c2:	3104      	adds	r1, #4

080003c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80003c4:	480b      	ldr	r0, [pc, #44]	; (80003f4 <LoopFillZerobss+0x1c>)
  ldr r3, =_edata
 80003c6:	4b0c      	ldr	r3, [pc, #48]	; (80003f8 <LoopFillZerobss+0x20>)
  adds r2, r0, r1
 80003c8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80003ca:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80003cc:	d3f6      	bcc.n	80003bc <CopyDataInit>
  ldr r2, =_sbss
 80003ce:	4a0b      	ldr	r2, [pc, #44]	; (80003fc <LoopFillZerobss+0x24>)
  b LoopFillZerobss
 80003d0:	e002      	b.n	80003d8 <LoopFillZerobss>

080003d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80003d2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80003d4:	f842 3b04 	str.w	r3, [r2], #4

080003d8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80003d8:	4b09      	ldr	r3, [pc, #36]	; (8000400 <LoopFillZerobss+0x28>)
  cmp r2, r3
 80003da:	429a      	cmp	r2, r3
  bcc FillZerobss
 80003dc:	d3f9      	bcc.n	80003d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80003de:	f000 f841 	bl	8000464 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003e2:	f000 f903 	bl	80005ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003e6:	f7ff ff03 	bl	80001f0 <main>
  bx lr
 80003ea:	4770      	bx	lr

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80003ec:	20014000 	.word	0x20014000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 80003f0:	08000658 	.word	0x08000658
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 80003f4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80003f8:	20000000 	.word	0x20000000
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 80003fc:	20000000 	.word	0x20000000
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8000400:	2000001c 	.word	0x2000001c

08000404 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000404:	e7fe      	b.n	8000404 <ADC1_IRQHandler>
	...

08000408 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
}
 800040c:	bf00      	nop
 800040e:	46bd      	mov	sp, r7
 8000410:	bc80      	pop	{r7}
 8000412:	4770      	bx	lr

08000414 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000418:	e7fe      	b.n	8000418 <HardFault_Handler+0x4>
 800041a:	bf00      	nop

0800041c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8000420:	e7fe      	b.n	8000420 <MemManage_Handler+0x4>
 8000422:	bf00      	nop

08000424 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8000428:	e7fe      	b.n	8000428 <BusFault_Handler+0x4>
 800042a:	bf00      	nop

0800042c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8000430:	e7fe      	b.n	8000430 <UsageFault_Handler+0x4>
 8000432:	bf00      	nop

08000434 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
}
 8000438:	bf00      	nop
 800043a:	46bd      	mov	sp, r7
 800043c:	bc80      	pop	{r7}
 800043e:	4770      	bx	lr

08000440 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
}
 8000444:	bf00      	nop
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr

0800044c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
}
 8000450:	bf00      	nop
 8000452:	46bd      	mov	sp, r7
 8000454:	bc80      	pop	{r7}
 8000456:	4770      	bx	lr

08000458 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
	/*  TimingDelay_Decrement(); */
#ifdef USE_STM32L_DISCOVERY
  TimingDelay_Decrement();
#endif
}
 800045c:	bf00      	nop
 800045e:	46bd      	mov	sp, r7
 8000460:	bc80      	pop	{r7}
 8000462:	4770      	bx	lr

08000464 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8000468:	4a15      	ldr	r2, [pc, #84]	; (80004c0 <SystemInit+0x5c>)
 800046a:	4b15      	ldr	r3, [pc, #84]	; (80004c0 <SystemInit+0x5c>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000472:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8000474:	4912      	ldr	r1, [pc, #72]	; (80004c0 <SystemInit+0x5c>)
 8000476:	4b12      	ldr	r3, [pc, #72]	; (80004c0 <SystemInit+0x5c>)
 8000478:	689a      	ldr	r2, [r3, #8]
 800047a:	4b12      	ldr	r3, [pc, #72]	; (80004c4 <SystemInit+0x60>)
 800047c:	4013      	ands	r3, r2
 800047e:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8000480:	4a0f      	ldr	r2, [pc, #60]	; (80004c0 <SystemInit+0x5c>)
 8000482:	4b0f      	ldr	r3, [pc, #60]	; (80004c0 <SystemInit+0x5c>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800048a:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 800048e:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000490:	4a0b      	ldr	r2, [pc, #44]	; (80004c0 <SystemInit+0x5c>)
 8000492:	4b0b      	ldr	r3, [pc, #44]	; (80004c0 <SystemInit+0x5c>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800049a:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 800049c:	4a08      	ldr	r2, [pc, #32]	; (80004c0 <SystemInit+0x5c>)
 800049e:	4b08      	ldr	r3, [pc, #32]	; (80004c0 <SystemInit+0x5c>)
 80004a0:	689b      	ldr	r3, [r3, #8]
 80004a2:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 80004a6:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 80004a8:	4b05      	ldr	r3, [pc, #20]	; (80004c0 <SystemInit+0x5c>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	60da      	str	r2, [r3, #12]
#ifdef DATA_IN_ExtSRAM
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
    
  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 80004ae:	f000 f80d 	bl	80004cc <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80004b2:	4b05      	ldr	r3, [pc, #20]	; (80004c8 <SystemInit+0x64>)
 80004b4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80004b8:	609a      	str	r2, [r3, #8]
#endif
}
 80004ba:	bf00      	nop
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	40023800 	.word	0x40023800
 80004c4:	88ffc00c 	.word	0x88ffc00c
 80004c8:	e000ed00 	.word	0xe000ed00

080004cc <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80004d2:	2300      	movs	r3, #0
 80004d4:	607b      	str	r3, [r7, #4]
 80004d6:	2300      	movs	r3, #0
 80004d8:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80004da:	4a41      	ldr	r2, [pc, #260]	; (80005e0 <SetSysClock+0x114>)
 80004dc:	4b40      	ldr	r3, [pc, #256]	; (80005e0 <SetSysClock+0x114>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004e4:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80004e6:	4b3e      	ldr	r3, [pc, #248]	; (80005e0 <SetSysClock+0x114>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004ee:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	3301      	adds	r3, #1
 80004f4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80004f6:	683b      	ldr	r3, [r7, #0]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d103      	bne.n	8000504 <SetSysClock+0x38>
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000502:	d1f0      	bne.n	80004e6 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000504:	4b36      	ldr	r3, [pc, #216]	; (80005e0 <SetSysClock+0x114>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800050c:	2b00      	cmp	r3, #0
 800050e:	d002      	beq.n	8000516 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000510:	2301      	movs	r3, #1
 8000512:	603b      	str	r3, [r7, #0]
 8000514:	e001      	b.n	800051a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000516:	2300      	movs	r3, #0
 8000518:	603b      	str	r3, [r7, #0]
  }
  
  if (HSEStatus == (uint32_t)0x01)
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	2b01      	cmp	r3, #1
 800051e:	d15a      	bne.n	80005d6 <SetSysClock+0x10a>
  {
    /* Enable 64-bit access */
    FLASH->ACR |= FLASH_ACR_ACC64;
 8000520:	4a30      	ldr	r2, [pc, #192]	; (80005e4 <SetSysClock+0x118>)
 8000522:	4b30      	ldr	r3, [pc, #192]	; (80005e4 <SetSysClock+0x118>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	f043 0304 	orr.w	r3, r3, #4
 800052a:	6013      	str	r3, [r2, #0]
    
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 800052c:	4a2d      	ldr	r2, [pc, #180]	; (80005e4 <SetSysClock+0x118>)
 800052e:	4b2d      	ldr	r3, [pc, #180]	; (80005e4 <SetSysClock+0x118>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	f043 0302 	orr.w	r3, r3, #2
 8000536:	6013      	str	r3, [r2, #0]

    /* Flash 1 wait state */
    FLASH->ACR |= FLASH_ACR_LATENCY;
 8000538:	4a2a      	ldr	r2, [pc, #168]	; (80005e4 <SetSysClock+0x118>)
 800053a:	4b2a      	ldr	r3, [pc, #168]	; (80005e4 <SetSysClock+0x118>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	f043 0301 	orr.w	r3, r3, #1
 8000542:	6013      	str	r3, [r2, #0]
    
    /* Power enable */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000544:	4a26      	ldr	r2, [pc, #152]	; (80005e0 <SetSysClock+0x114>)
 8000546:	4b26      	ldr	r3, [pc, #152]	; (80005e0 <SetSysClock+0x114>)
 8000548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800054a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054e:	6253      	str	r3, [r2, #36]	; 0x24
  
    /* Select the Voltage Range 1 (1.8 V) */
    PWR->CR = PWR_CR_VOS_0;
 8000550:	4b25      	ldr	r3, [pc, #148]	; (80005e8 <SetSysClock+0x11c>)
 8000552:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000556:	601a      	str	r2, [r3, #0]
  
    /* Wait Until the Voltage Regulator is ready */
    while((PWR->CSR & PWR_CSR_VOSF) != RESET)
 8000558:	bf00      	nop
 800055a:	4b23      	ldr	r3, [pc, #140]	; (80005e8 <SetSysClock+0x11c>)
 800055c:	685b      	ldr	r3, [r3, #4]
 800055e:	f003 0310 	and.w	r3, r3, #16
 8000562:	2b00      	cmp	r3, #0
 8000564:	d1f9      	bne.n	800055a <SetSysClock+0x8e>
    {
    }
        
    /* HCLK = SYSCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000566:	4a1e      	ldr	r2, [pc, #120]	; (80005e0 <SetSysClock+0x114>)
 8000568:	4b1d      	ldr	r3, [pc, #116]	; (80005e0 <SetSysClock+0x114>)
 800056a:	689b      	ldr	r3, [r3, #8]
 800056c:	6093      	str	r3, [r2, #8]
  
    /* PCLK2 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800056e:	4a1c      	ldr	r2, [pc, #112]	; (80005e0 <SetSysClock+0x114>)
 8000570:	4b1b      	ldr	r3, [pc, #108]	; (80005e0 <SetSysClock+0x114>)
 8000572:	689b      	ldr	r3, [r3, #8]
 8000574:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 8000576:	4a1a      	ldr	r2, [pc, #104]	; (80005e0 <SetSysClock+0x114>)
 8000578:	4b19      	ldr	r3, [pc, #100]	; (80005e0 <SetSysClock+0x114>)
 800057a:	689b      	ldr	r3, [r3, #8]
 800057c:	6093      	str	r3, [r2, #8]
    
    /*  PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |
 800057e:	4a18      	ldr	r2, [pc, #96]	; (80005e0 <SetSysClock+0x114>)
 8000580:	4b17      	ldr	r3, [pc, #92]	; (80005e0 <SetSysClock+0x114>)
 8000582:	689b      	ldr	r3, [r3, #8]
 8000584:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8000588:	6093      	str	r3, [r2, #8]
                                        RCC_CFGR_PLLDIV));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMUL12 | RCC_CFGR_PLLDIV3);
 800058a:	4a15      	ldr	r2, [pc, #84]	; (80005e0 <SetSysClock+0x114>)
 800058c:	4b14      	ldr	r3, [pc, #80]	; (80005e0 <SetSysClock+0x114>)
 800058e:	689b      	ldr	r3, [r3, #8]
 8000590:	f443 0311 	orr.w	r3, r3, #9502720	; 0x910000
 8000594:	6093      	str	r3, [r2, #8]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000596:	4a12      	ldr	r2, [pc, #72]	; (80005e0 <SetSysClock+0x114>)
 8000598:	4b11      	ldr	r3, [pc, #68]	; (80005e0 <SetSysClock+0x114>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005a0:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80005a2:	bf00      	nop
 80005a4:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <SetSysClock+0x114>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d0f9      	beq.n	80005a4 <SetSysClock+0xd8>
    {
    }
        
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80005b0:	4a0b      	ldr	r2, [pc, #44]	; (80005e0 <SetSysClock+0x114>)
 80005b2:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <SetSysClock+0x114>)
 80005b4:	689b      	ldr	r3, [r3, #8]
 80005b6:	f023 0303 	bic.w	r3, r3, #3
 80005ba:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 80005bc:	4a08      	ldr	r2, [pc, #32]	; (80005e0 <SetSysClock+0x114>)
 80005be:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <SetSysClock+0x114>)
 80005c0:	689b      	ldr	r3, [r3, #8]
 80005c2:	f043 0303 	orr.w	r3, r3, #3
 80005c6:	6093      	str	r3, [r2, #8]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 80005c8:	bf00      	nop
 80005ca:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <SetSysClock+0x114>)
 80005cc:	689b      	ldr	r3, [r3, #8]
 80005ce:	f003 030c 	and.w	r3, r3, #12
 80005d2:	2b0c      	cmp	r3, #12
 80005d4:	d1f9      	bne.n	80005ca <SetSysClock+0xfe>
  else
  {
    /* If HSE fails to start-up, the application will have wrong clock
       configuration. User can add here some code to deal with this error */
  }
}
 80005d6:	bf00      	nop
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	bc80      	pop	{r7}
 80005de:	4770      	bx	lr
 80005e0:	40023800 	.word	0x40023800
 80005e4:	40023c00 	.word	0x40023c00
 80005e8:	40007000 	.word	0x40007000

080005ec <__libc_init_array>:
 80005ec:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <__libc_init_array+0x3c>)
 80005ee:	b570      	push	{r4, r5, r6, lr}
 80005f0:	461e      	mov	r6, r3
 80005f2:	4c0e      	ldr	r4, [pc, #56]	; (800062c <__libc_init_array+0x40>)
 80005f4:	2500      	movs	r5, #0
 80005f6:	1ae4      	subs	r4, r4, r3
 80005f8:	10a4      	asrs	r4, r4, #2
 80005fa:	42a5      	cmp	r5, r4
 80005fc:	d004      	beq.n	8000608 <__libc_init_array+0x1c>
 80005fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000602:	4798      	blx	r3
 8000604:	3501      	adds	r5, #1
 8000606:	e7f8      	b.n	80005fa <__libc_init_array+0xe>
 8000608:	f000 f816 	bl	8000638 <_init>
 800060c:	4b08      	ldr	r3, [pc, #32]	; (8000630 <__libc_init_array+0x44>)
 800060e:	4c09      	ldr	r4, [pc, #36]	; (8000634 <__libc_init_array+0x48>)
 8000610:	461e      	mov	r6, r3
 8000612:	1ae4      	subs	r4, r4, r3
 8000614:	10a4      	asrs	r4, r4, #2
 8000616:	2500      	movs	r5, #0
 8000618:	42a5      	cmp	r5, r4
 800061a:	d004      	beq.n	8000626 <__libc_init_array+0x3a>
 800061c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000620:	4798      	blx	r3
 8000622:	3501      	adds	r5, #1
 8000624:	e7f8      	b.n	8000618 <__libc_init_array+0x2c>
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	08000650 	.word	0x08000650
 800062c:	08000650 	.word	0x08000650
 8000630:	08000650 	.word	0x08000650
 8000634:	08000654 	.word	0x08000654

08000638 <_init>:
 8000638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800063a:	bf00      	nop
 800063c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800063e:	bc08      	pop	{r3}
 8000640:	469e      	mov	lr, r3
 8000642:	4770      	bx	lr

08000644 <_fini>:
 8000644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000646:	bf00      	nop
 8000648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800064a:	bc08      	pop	{r3}
 800064c:	469e      	mov	lr, r3
 800064e:	4770      	bx	lr
